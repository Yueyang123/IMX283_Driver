#include <linux/config.h>

#include <linux/module.h>
#include <linux/version.h>
#include <linux/types.h>
#include <linux/errno.h>

#include <linux/kernel.h>
#include <linux/slab.h>
#include <linux/fcntl.h>
#include <linux/fs.h>


#include <linux/spinlock.h>
#include <linux/sched.h>
#include <linux/interrupt.h>
#include <linux/tty.h>
#include <linux/mm.h>
#include <linux/signal.h>
#include <linux/init.h>
#include <linux/kbd_ll.h>
#include <linux/delay.h>
#include <linux/random.h>
#include <linux/poll.h>
#include <linux/miscdevice.h>
#include <linux/slab.h>
//#include <linux/kbd_kern.h>
#include <linux/vt_kern.h>
#include <linux/smp_lock.h>
#include <linux/kd.h>
#include <linux/pm.h>
#include <linux/wait.h>
#include <linux/proc_fs.h>

#define pk(a,b...) index+=sprintf(debug_string+index,a, ## b)
//#define SEND_USE_INTERRUPT 0
#define SEND_SUCCESS 11

//#include <asm/keyboard.h>
#include <asm/bitops.h>
#include <asm/uaccess.h>
#include <asm/irq.h>
#include <asm/system.h>

#include <asm/io.h>
#if CONFIG_MODVERSIONS==1
//#define MODVERSIONS
//#include <linux/modversions.h>
#endif        

/* Some configuration switches are present in the include file... */

#include <linux/pc_keyb.h>
#include "mcf5272.h"
#include "cpld.h"

#define MCF_CLK 66000000


static struct timer_list timer_keyboard_dog;
static unsigned long flags;
/*
 *	Define the TIMER register set addresses.
 */
#define	MCFTIMER_TMR		0x00		/* Timer Mode reg (r/w) */
#define	MCFTIMER_TRR		0x02		/* Timer Reference (r/w) */
#define	MCFTIMER_TCR		0x04		/* Timer Capture reg (r/w) */
#define	MCFTIMER_TCN		0x06		/* Timer Counter reg (r/w) */
#define	MCFTIMER_TER		0x11		/* Timer Event reg (r/w) */


/*
 *	Bit definitions for the Timer Mode Register (TMR).
 *	Register bit flags are common accross ColdFires.
 */
#define	MCFTIMER_TMR_PREMASK	0xff00		/* Prescalar mask */
#define	MCFTIMER_TMR_DISCE	0x0000		/* Disable capture */
#define	MCFTIMER_TMR_ANYCE	0x00c0		/* Capture any edge */
#define	MCFTIMER_TMR_FALLCE	0x0080		/* Capture fallingedge */
#define	MCFTIMER_TMR_RISECE	0x0040		/* Capture rising edge */
#define	MCFTIMER_TMR_ENOM	0x0020		/* Enable output toggle */
#define	MCFTIMER_TMR_DISOM	0x0000		/* Do single output pulse  */
#define	MCFTIMER_TMR_ENORI	0x0010		/* Enable ref interrupt */
#define	MCFTIMER_TMR_DISORI	0x0000		/* Disable ref interrupt */
#define	MCFTIMER_TMR_RESTART	0x0008		/* Restart counter */
#define	MCFTIMER_TMR_FREERUN	0x0000		/* Free running counter */
#define	MCFTIMER_TMR_CLKTIN	0x0006		/* Input clock is TIN */
#define	MCFTIMER_TMR_CLK16	0x0004		/* Input clock is /16 */
#define	MCFTIMER_TMR_CLK1	0x0002		/* Input clock is /1 */
#define	MCFTIMER_TMR_CLKSTOP	0x0000		/* Stop counter */
#define	MCFTIMER_TMR_ENABLE	0x0001		/* Enable timer */
#define	MCFTIMER_TMR_DISABLE	0x0000		/* Disable timer */

/*
 *	Bit definitions for the Timer Event Registers (TER).
 */
#define	MCFTIMER_TER_CAP	0x01		/* Capture event */
#define	MCFTIMER_TER_REF	0x02		/* Refernece event */

/****************************************************************************/


extern int set_pa0_pa7(unsigned short cmd,unsigned long arg);
#define imm 0x10000000
#define MCFEXT_IRQ6_VECTOR 91
#define PS2DataLineState (MCF5272_RD_GPIO_PADAT(imm)&0x4000)
#define RECEIVE_OK 4
#define AckOk    2
#define AckNotOk 3
#define PortEnable 1
#define PortDisable 0 
unsigned short state_DataAndCLK=0;
unsigned short IsKeyReceived=0;

#define InitDataPort()  {	MCF5272_WR_GPIO_PACNT(imm,MCF5272_RD_GPIO_PACNT(imm)&0xcfffffff);\
				MCF5272_WR_GPIO_PADDR(imm,MCF5272_RD_GPIO_PADDR(imm)&(~0x4000));\
				MCF5272_WR_GPIO_PACNT(imm,MCF5272_RD_GPIO_PACNT(imm)&0xffff3fff);\
                                MCF5272_WR_GPIO_PADDR(imm,MCF5272_RD_GPIO_PADDR(imm)|(0x0080));\
				set_pa0_pa7(PS2_DATA_OUT,1);\
				set_pa0_pa7(PS2_DATA_CTRL,PortDisable);}
				
#define InitClkPort()   {	MCF5272_WR_GPIO_PACNT(imm,MCF5272_RD_GPIO_PACNT(imm)&0x3fffffff);\
				MCF5272_WR_GPIO_PADDR(imm,MCF5272_RD_GPIO_PADDR(imm)&(~0x8000));\
				set_pa0_pa7(PS2_CLK_OUT,1);\
				set_pa0_pa7(PS2_CLK_CTRL,PortDisable);}
				
#define SetDataPortAsOut()   MCF5272_WR_GPIO_PADDR(imm,MCF5272_RD_GPIO_PADDR(imm)|0x4000)
#define SetDataPortAsIn()    MCF5272_WR_GPIO_PADDR(imm,MCF5272_RD_GPIO_PADDR(imm)&(~0x4000))


#define SetClkPortAsOut()     {	MCF5272_WR_SIM_ICR4(imm,0x800000);/*关中断*/}
#define SetClkPortAsIn()      {	MCF5272_WR_SIM_ICR4(imm,0xD00000);/*开中断*/}
				
				
#define	InitPs2Icr()     {	MCF5272_WR_SIM_ICR4(imm,0xD00000);/*中断优先级5*/\
				MCF5272_WR_SIM_PITR(imm,MCF5272_RD_SIM_PITR(imm)&(~0x0020));}

#define OutClk(dt) 	{	set_pa0_pa7(PS2_CLK_OUT,dt);\
				set_pa0_pa7(PS2_CLK_CTRL,PortEnable);\
				set_pa0_pa7(PS2_CLK_OUT,dt);state_DataAndCLK|=1;}
				
#define OutData(dt) 	{	set_pa0_pa7(PS2_DATA_OUT,dt);\
				set_pa0_pa7(PS2_DATA_CTRL,PortEnable);\
				set_pa0_pa7(PS2_DATA_OUT,dt);state_DataAndCLK|=2;}
				
#define ReleaseClkPort() {	set_pa0_pa7(PS2_CLK_OUT,1);\
				set_pa0_pa7(PS2_CLK_CTRL,PortDisable);state_DataAndCLK&=0xfe;}
				
#define ReleaseDataPort(){	set_pa0_pa7(PS2_DATA_OUT,1);\
				 set_pa0_pa7(PS2_DATA_CTRL,PortDisable);state_DataAndCLK&=0xfd;}

#define DisableTimeOut() MCF5272_WR_TIMER2_TMR(imm,MCFTIMER_TMR_DISABLE)
#define timeout_send 1
#define timeout_receive 2
#define SetTimeOut_us(pa,pa1) {\
	KeyboardTimeout=pa1;\
	MCF5272_WR_TIMER2_TMR(imm,MCFTIMER_TMR_DISABLE);\
	MCF5272_WR_TIMER2_TCN(imm,0);\
	MCF5272_WR_TIMER2_TRR(imm,(unsigned short) ((MCF_CLK / 16) / (1000000/pa)));\
	MCF5272_WR_TIMER2_TMR(imm,(MCFTIMER_TMR_ENORI | MCFTIMER_TMR_CLK16 |\
		                MCFTIMER_TMR_RESTART | MCFTIMER_TMR_ENABLE));}

				
static struct aux_queue *queue; /* Mouse data buffer. */
spinlock_t kbd_controller_lock = SPIN_LOCK_UNLOCKED;
extern struct file_operations psaux_fops;








#define VERSION 100

#define KBD_REPORT_ERR
#define KBD_REPORT_UNKN

#define KBD_ESCAPEE0	0xe0		/* in */
#define KBD_ESCAPEE1	0xe1		/* in */

#define ESCE0(x)	(0xe000|(x))
#define ESCE1(x)	(0xe100|(x))

#define KBD_BAT		0xaa		/* in */
#define KBD_SETLEDS	0xed		/* out */
#define KBD_ECHO	0xee		/* in/out */
#define KBD_BREAK	0xf0		/* in */
#define KBD_TYPRATEDLY	0xf3		/* out */
#define KBD_SCANENABLE	0xf4		/* out */
#define KBD_DEFDISABLE	0xf5		/* out */
#define KBD_DEFAULT	0xf6		/* out */
#define KBD_ACK		0xfa		/* in */
#define KBD_DIAGFAIL	0xfd		/* in */
#define KBD_RESEND	0xfe		/* in/out */
#define KBD_RESET	0xff		/* out */

#define CODE_BREAK	0x80
#define CODE_ESCAPEE0	2
#define CODE_ESCAPEE1	4
#define CODE_ESCAPE12	8


#define K_NONE		0x7f
#define K_ESC		0x01
#define K_F1		0x3b
#define K_F2		0x3c
#define K_F3		0x3d
#define K_F4		0x3e
#define K_F5		0x3f
#define K_F6		0x40
#define K_F7		0x41
#define K_F8		0x42
#define K_F9		0x43
#define K_F10		0x44
#define K_F11		0x57
#define K_F12		0x58
#define K_PRNT		0x54
#define K_SCRL		0x46
#define K_BRK		0x77
#define K_AGR		0x29
#define K_1		0x02
#define K_2		0x03
#define K_3		0x04
#define K_4		0x05
#define K_5		0x06
#define K_6		0x07
#define K_7		0x08
#define K_8		0x09
#define K_9		0x0a
#define K_0		0x0b
#define K_MINS		0x0c
#define K_EQLS		0x0d
#define K_BKSP		0x0e
#define K_INS		0x6e
#define K_HOME		0x66
#define K_PGUP		0x68
#define K_NUML		0x45
#define KP_SLH		0x62
#define KP_STR		0x37
#define KP_MNS		0x4a
#define K_TAB		0x0f
#define K_Q		0x10
#define K_W		0x11
#define K_E		0x12
#define K_R		0x13
#define K_T		0x14
#define K_Y		0x15
#define K_U		0x16
#define K_I		0x17
#define K_O		0x18
#define K_P		0x19
#define K_LSBK		0x1a
#define K_RSBK		0x1b
#define K_ENTR		0x1c
#define K_DEL		111
#define K_END		0x6b
#define K_PGDN		0x6d
#define KP_7		0x47
#define KP_8		0x48
#define KP_9		0x49
#define KP_PLS		0x4e
#define K_CAPS		0x3a
#define K_A		0x1e
#define K_S		0x1f
#define K_D		0x20
#define K_F		0x21
#define K_G		0x22
#define K_H		0x23
#define K_J		0x24
#define K_K		0x25
#define K_L		0x26
#define K_SEMI		0x27
#define K_SQOT		0x28
#define K_HASH		K_NONE
#define KP_4		0x4b
#define KP_5		0x4c
#define KP_6		0x4d
#define K_LSFT		0x2a
#define K_BSLH		0x2b
#define K_Z		0x2c
#define K_X		0x2d
#define K_C		0x2e
#define K_V		0x2f
#define K_B		0x30
#define K_N		0x31
#define K_M		0x32
#define K_COMA		0x33
#define K_DOT		0x34
#define K_FSLH		0x35
#define K_RSFT		0x36
#define K_UP		0x67
#define KP_1		0x4f
#define KP_2		0x50
#define KP_3		0x51
#define KP_ENT		0x1c  //0x1c
#define K_LCTL		0x1d
#define K_LALT		0x38
#define K_SPCE		0x39
#define K_RALT		0x64
#define K_RCTL		0x61
#define K_LEFT		0x69
#define K_DOWN		0x6c
#define K_RGHT		0x6a
#define KP_0		0x52
#define KP_DOT		0x53


#define K_VIEW_FIRE    113 
#define K_VIEW_ERROR   114
#define K_VIEW_ACTION  115
#define K_ACK_FIRE     116

#if 0
static unsigned char keycode_translate[256] =
{
/* 00 */  K_NONE, K_F9  , K_NONE, K_F5  , K_F3  , K_F1  , K_F2  , K_F12 ,
/* 08 */  K_NONE, K_F10 , K_F8  , K_F6  , K_F4  , K_TAB , K_AGR , K_NONE,
/* 10 */  K_NONE, K_LALT, K_LSFT, K_NONE, K_LCTL, K_Q   , K_1   , K_NONE,
/* 18 */  K_NONE, K_NONE, K_Z   , K_S   , K_A   , K_W   , K_2   , K_NONE,
/* 20 */  K_NONE, K_C   , K_X   , K_D   , K_E   , K_4   , K_3   , K_NONE,
/* 28 */  K_NONE, K_SPCE, K_V   , K_F   , K_T   , K_R   , K_5   , K_NONE,
/* 30 */  K_NONE, K_N   , K_B   , K_H   , K_G   , K_Y   , K_6   , K_NONE,
/* 38 */  K_NONE, K_NONE, K_M   , K_J   , K_U   , K_7   , K_8   , K_NONE,
/* 40 */  K_NONE, K_COMA, K_K   , K_I   , K_O   , K_0   , K_9   , K_ACK_FIRE,
/* 48 */  K_VIEW_FIRE, K_DOT , K_FSLH, K_L   , K_SEMI, K_P   , K_MINS, K_VIEW_ACTION,
/* 50 */  K_VIEW_ERROR, K_NONE, K_SQOT, K_NONE, K_LSBK, K_EQLS, K_NONE, K_NONE,
/* 58 */  K_CAPS, K_RSFT, K_ENTR, K_RSBK, K_NONE, K_HASH, K_NONE, K_NONE,
/* 60 */  K_UP  , K_BSLH, K_NONE, K_NONE, K_NONE, K_NONE, K_BKSP, K_NONE,
/* 68 */  K_DOWN, KP_1  , K_NONE, KP_4  , KP_7  , K_NONE, K_NONE, K_NONE,
/* 70 */  KP_0  , KP_DOT, KP_2  , KP_5  , KP_6  , KP_8  , K_ESC , K_NUML,
/* 78 */  K_F11 , KP_PLS, KP_3  , KP_MNS, KP_STR, KP_9  , K_SCRL, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_F7  , K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE
};
#else
static unsigned char keycode_translate[256] =
{
/* 00 */  K_NONE, K_F9  , K_NONE, K_F5  , K_F3  , K_F1  , K_F2  , K_F12 ,
/* 08 */  K_A, K_F10 , K_F8  , K_F6  , K_F4  , K_TAB , K_AGR , K_E,
/* 10 */  K_L, K_LALT, K_LSFT, K_B, K_LCTL, K_Q   , K_1   , K_F,
/* 18 */  K_M, K_G, K_Z   , K_S   , K_A   , K_W   , K_2   , K_N,
/* 20 */  K_H, K_C   , K_X   , K_D   , K_E   , K_4   , K_3   , K_O,
/* 28 */  K_I, K_SPCE, K_V   , K_F   , K_T   , K_R   , K_5   , K_P,
/* 30 */  K_C, K_N   , K_B   , K_H   , K_G   , K_Y   , K_6   , K_Q,
/* 38 */  K_J, K_D, K_M   , K_J   , K_U   , K_7   , K_8   , K_K,
/* 40 */  K_R, K_COMA, K_K   , K_I   , K_O   , K_0   , K_9   , K_F7,
/* 48 */  K_F8, K_DOT , K_FSLH, K_L   , K_SEMI, K_P   , K_MINS, K_F9,
/* 50 */  K_F10, K_NONE, K_SQOT, K_NONE, K_LSBK, K_EQLS, K_NONE, K_NONE,
/* 58 */  K_CAPS, K_RSFT, K_ENTR, K_RSBK, K_NONE, K_HASH, K_NONE, K_NONE,
/* 60 */  K_UP  , K_BSLH, K_NONE, K_NONE, K_NONE, K_NONE, K_BKSP, K_NONE,
/* 68 */  K_DOWN, KP_1  , K_NONE, KP_4  , KP_7  , K_NONE, K_NONE, K_NONE,
/* 70 */  KP_0  , KP_DOT, KP_2  , KP_5  , KP_6  , KP_8  , K_ESC , K_NUML,
/* 78 */  K_F11 , KP_PLS, KP_3  , KP_MNS, KP_STR, KP_9  , K_SCRL, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_F7  , K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE,
	  K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE, K_NONE
};
#endif



#define CLK_IS_HIGH (MCF5272_RD_GPIO_PADAT(imm)&0x8000)
#define debugtime 0
static int wait_fall_edge(void)
{
	unsigned int i=10000;

#if debugtime
	static struct timeval tv,tv2;
	
	do_gettimeofday(&tv);
#endif	
	i=10000;
	while(i--)
	{//wait for high
		if(!(CLK_IS_HIGH))
		{				
		}
		else
		{
			if(CLK_IS_HIGH)
			{
				if(CLK_IS_HIGH)
				{
					break;
				}
			}
		}
		
	}
	i=10000;
	
	while(i--)
	{//wait for low
		if(CLK_IS_HIGH)
		{				
		}
		else
		{
			if(!CLK_IS_HIGH)
			{
				if(!CLK_IS_HIGH)
				{
					return 1;
 				}
			}
		}
		
	} 
#if debugtime
	do_gettimeofday(&tv2);
	printk("time space: %d us\n",(int)((tv2.tv_sec-tv.tv_sec)*1000000+
			tv2.tv_usec-tv.tv_usec));
	
	return 0;
#endif	
	return 0;  //time out
}

static int waitus(int us)
{
	unsigned int i;

#if 0
	static struct timeval tv,tv2;
	
	do_gettimeofday(&tv);
#endif	
	
	i=us*(1000/80);
	while(i--)
	{
	}
#if 0
	do_gettimeofday(&tv2);
	printk("time space: %d us\n",(int)((tv2.tv_sec-tv.tv_sec)*1000000+
			tv2.tv_usec-tv.tv_usec));
	
#endif	
	return 0;
}


static unsigned char status;
static unsigned char ncodes;
static unsigned char bi;
static unsigned char buffer[4];
static void handle_rawcode(int keyval)
	//硬件扫描码处理
{
	int keysym;
#if 1
	if (keyval > 0x83) {
		//
		switch (keyval) {
		case KBD_ESCAPEE0:
			ncodes = 2;
			bi = 0;
			break;

		case KBD_ESCAPEE1:
			ncodes = 3;
			bi = 0;
			break;

		case KBD_BREAK:
			status |= CODE_BREAK;
			return;

		default:
			return;
		}
	}

	if (ncodes) {
		buffer[bi++] = keyval;
		ncodes -= 1;
		if (ncodes)
			return;
		keysym = K_NONE;
		switch (buffer[0] << 8 | buffer[1]) {
		case ESCE0(0x11): keysym = K_RALT; break;
		case ESCE0(0x14): keysym = K_RCTL; break;
		/*
		 * take care of MS extra keys (actually
		 * 0x7d - 0x7f, but last one is already K_NONE
		 */
		case ESCE0(0x1f): keysym = 124;    break;
		case ESCE0(0x27): keysym = 125;    break;
		case ESCE0(0x2f): keysym = 126;    break;
		case ESCE0(0x4a): keysym = KP_SLH; break;
		case ESCE0(0x5a): keysym = KP_ENT; break;
		case ESCE0(0x69): keysym = K_END;  break;
		case ESCE0(0x6b): keysym = K_LEFT; break;
		case ESCE0(0x6c): keysym = K_HOME; break;
		case ESCE0(0x70): keysym = K_INS;  break;
		case ESCE0(0x71): keysym = K_DEL;  break;
		case ESCE0(0x72): keysym = K_DOWN; break;
		case ESCE0(0x74): keysym = K_RGHT; break;
		case ESCE0(0x75): keysym = K_UP;   break;
		case ESCE0(0x7a): keysym = K_PGDN; break;
		case ESCE0(0x7c): keysym = K_PRNT; break;
		case ESCE0(0x7d): keysym = K_PGUP; break;
		case ESCE1(0x14):
			if (buffer[2] == 0x77)
				keysym = K_BRK;
			break;
		case ESCE0(0x12):		/* ignore escaped shift key */
			status = 0;
			return;
		}
	} else {
		bi = 0;
		keysym = keycode_translate[keyval]|status;
		status = 0;
	}
#else 
	
	keysym=keyval;
#endif

	if (keysym != K_NONE)
	{
		int head = queue->head;
		
		queue->buf[head] = keysym|status;
		status=0;
//		printk("%x\n",(unsigned char)keysym);
		head = (head + 1) & (AUX_BUF_SIZE-1);
		if (head != queue->tail) {
			queue->head = head;
			if (queue->fasync)
			kill_fasync(&queue->fasync, SIGIO, POLL_IN);
			wake_up_interruptible(&queue->proc_list);
		}
		else
		{
//			printk("key buff full!!\n");
		}
	}
}








static inline int queue_empty(void)
{
	if((queue->head == queue->tail))return 1;
	return 0;
} 


static unsigned char get_from_queue(void)
{
	unsigned char result=0;
	unsigned long flags;

	spin_lock_irqsave(&kbd_controller_lock, flags);
	if(queue->tail==queue->head){
	}else{
		result = queue->buf[queue->tail];
		queue->tail = (queue->tail + 1) & (AUX_BUF_SIZE-1);
	}
	spin_unlock_irqrestore(&kbd_controller_lock, flags);
	//printk("key=%x\n",result);
	return result;
}

static int mouse_state=0;//1=send 0=receive
static int mouse_counter=0;
static unsigned char mouse_data=0;
static unsigned char mouse_data_send_temp=0;
static int mouse_checksum=0;
static int resend_conuter=0;
static DECLARE_WAIT_QUEUE_HEAD(mouse_w_wait);
#ifdef SEND_USE_INTERRUPT
static int KeyboardTimeout=0;
int SendData(unsigned char dt) 
{
	unsigned int i;
	mouse_data_send_temp=dt;
	
	SetClkPortAsOut();   		//1)
	OutClk(0);
	mouse_state=1;
	mouse_counter=0;
	mouse_checksum=0;
	mouse_data=mouse_data_send_temp;
	i=1000;
	while(i--);//延迟至少100us
	OutData(0);			//2)
	i=500;
	while(i--);
	ReleaseClkPort();
	SetClkPortAsIn();		//3)
	
	SetTimeOut_us(2000,timeout_send);
	return 0;
}
#else

int SendData(unsigned char dt) 
{
	unsigned int i;
	int ret_value=0;
	unsigned char mouse_data_send;
	
	mouse_data_send=dt;
	
	save_flags(flags); cli();	
	
	OutClk(0);OutData(1);			
	mouse_state=1;
	mouse_counter=0;
	mouse_checksum=0;
	waitus(150);
	OutData(0);			//2)
	ReleaseClkPort();
	for(i=0;i<8;i++)
	{
		if(wait_fall_edge())
		{
			if(mouse_data_send&1)
			{
				OutData(1);
				mouse_checksum=!mouse_checksum;
			}
			else 
			{
				OutData(0);
			}
			mouse_data_send>>=1;
			ret_value++;
		}
		else
		{
			goto endofsend;							
		}
	}
	if(wait_fall_edge())
	{
		mouse_checksum=!mouse_checksum;
		OutData(mouse_checksum);		
		ret_value++;
	}
	else
	{
		goto endofsend;
	}
	if(wait_fall_edge())
	{
		OutData(1);		
		ret_value++;
	}
	else
	{
		goto endofsend;
	}
	if(wait_fall_edge())
	{
		ReleaseDataPort();
		if(PS2DataLineState==0)//ack ok
		{
		ret_value++;
		}
	}
endofsend:	
	ReleaseDataPort();
	ReleaseClkPort();
	mouse_state=0;
	mouse_counter=0;
	mouse_checksum=0;
	restore_flags(flags);
	return ret_value;
}
#endif

#define send_data(baba)	SendData(baba)

//	/*printk("send %x :%d\n",baba,__LINE__);*/while(mouse_state);}
void AskResent(unsigned long pa)
{	//请求重发
	resend_conuter++;
	if(resend_conuter>0)
	{
		resend_conuter=0;
		mouse_state=0;
		ReleaseDataPort();
		ReleaseClkPort();
		return;
	}
	send_data(mouse_data_send_temp);
	pa=pa;	
}
#ifdef SEND_USE_INTERRUPT
static struct timeval tv_mouse_time_out_counter;
#endif

static void mouse_interrupt(int irq, void *dev_id, struct pt_regs *regs)
{  
	static unsigned short scancode=0;
#ifdef SEND_USE_INTERRUPT
	static struct timeval tv;
#endif
	MCF5272_WR_SIM_ICR4(imm,0x800000);
	if((MCF5272_RD_GPIO_PADAT(imm)&0x8000))
	{//错误---下降沿中断,现在是高电平
		MCF5272_WR_SIM_ICR4(imm,0xd00000);
		return;
	}

	if(mouse_state==1)
	{		//向device发送数据
		mouse_counter++;
//*
		switch(mouse_counter)
		{
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 7:
			case 8:
				if(mouse_data&1)
				{
					OutData(1);
					mouse_checksum=!mouse_checksum;
	 			}
				else 
				{
					OutData(0);
				}
				mouse_data>>=1;
				break;
			case 9:
				if(mouse_checksum)
				{
					OutData(0);
				}
				else
				{
					OutData(1);
				}
				break;
			case 10:
				OutData(1);				
				ReleaseDataPort();
				break;
			case 11:
				if(PS2DataLineState==0)//ack ok
				{
					DisableTimeOut();
					mouse_state=0;
				}
				else			//ack not ok
				{
					AskResent(0);
					printk("%d\n",__LINE__);
				}
				break;
			default:
				mouse_state=0;
				ReleaseDataPort();
				break;	
 		}
//		*/
 	}
	else if(mouse_state==0)//waiting scancode
#ifdef SEND_USE_INTERRUPT
	{		//正在等待接收device数据

#if 0		
		//测试,在中断中向pa7发一个窄脉冲
		if((MCF5272_RD_GPIO_PADAT(imm)&0x8000)==0)
		MCF5272_WR_GPIO_PADAT(imm,MCF5272_RD_GPIO_PADAT(imm)|0x80);
		j=10;while(j--);
		MCF5272_WR_GPIO_PADAT(imm,MCF5272_RD_GPIO_PADAT(imm)&~0x80);
		
#endif
#if 1
		if(PS2DataLineState) 	scancode=0x80;
		else			scancode=0;
		
		do_gettimeofday(&tv);
		if(((tv.tv_sec-tv_mouse_time_out_counter.tv_sec)*1000000+
				tv.tv_usec-tv_mouse_time_out_counter.tv_usec)>150)
		{	//如果150us没收到过数据
			mouse_counter=0;
			mouse_data=0;
		}
		tv_mouse_time_out_counter.tv_sec=tv.tv_sec;
		tv_mouse_time_out_counter.tv_usec=tv.tv_usec;
		switch(mouse_counter/*当前已经接收位数计数器*/)
		{
			case 0:
				if(!scancode)
		 		{//如果0,当做起始位
					mouse_counter=1;//开始接收
					SetTimeOut_us(100,timeout_receive);//100us超时
				}
				mouse_data=0;
				mouse_checksum=0;
				break;
			case 1:
			case 2:
			case 3:
			case 4:
			case 5:
			case 6:
			case 7:
			case 8:
				SetTimeOut_us(100,timeout_receive);//100us超时
				mouse_data>>=1;
				mouse_data|=scancode;
				mouse_counter++;
				if(scancode)
					mouse_checksum=!mouse_checksum;
				break;
			case 9:	
				SetTimeOut_us(100,timeout_receive);//100us超时
				if(scancode)
					mouse_checksum=!mouse_checksum;
//					printk("received data:%x   @ %d\n",mouse_data,__LINE__);
				if(mouse_checksum)
				{	//ps2中采用奇校验
				//	mouse_state=RECEIVE_OK;

					handle_rawcode(mouse_data);
					IsKeyReceived=1;
				}
				else
				{	//校验错误
					SendData(KBD_RESEND);
//					printk("send KBD_RESEND:%d\n",__LINE__);
					//tasklet_schedule(&ask_resent_key);				
				}
				mouse_counter++;
				break;
			case 10://停止位
				DisableTimeOut();
				mouse_counter=0;
//				printk("0x%.2x\n",mouse_data);
				break;			
			default:
				break;
		}  
#endif	
  	}
#else
	{
		int k;
		if(PS2DataLineState) 	scancode=0x80;
		else			scancode=0;
		mouse_data=0;
		mouse_checksum=0;

		for(k=0;k<8;k++)		
		{
			if(wait_fall_edge())
			{				
				if(PS2DataLineState) 	scancode=0x80;
				else			scancode=0;
				mouse_data>>=1;
				mouse_data|=scancode;
				if(scancode)
					mouse_checksum=!mouse_checksum;			
			}
			else
			{
				break;
			}
		}
		if(wait_fall_edge())
		{
			if(PS2DataLineState) 	scancode=0x80;
			else			scancode=0;
			if(scancode)
				mouse_checksum=!mouse_checksum;
			if(mouse_checksum)
			{
				k++;
			}
			else
			{
				goto receive_end;
			}
		}
		else
		{
			goto receive_end;
		}


		
		if(wait_fall_edge())
		{
			k++;
		}
		else
		{
			goto receive_end;
		}
		
receive_end:	
		if(k==10)
		{
		//	printk("mt:%x\n",mouse_data);
			handle_rawcode(mouse_data);
		}
		else
		{
			SendData(KBD_RESEND);			
		}
		
	}
#endif
	MCF5272_WR_SIM_ICR4(imm,0xd00000);//准备接收下一个中断
}
#ifdef SEND_USE_INTERRUPT
static void timer2_interrupt(int irq, void *dev_id, struct pt_regs *regs)
{
#if 0		
	int j;
	//测试,在中断中向pa7发一个窄脉冲
	//if((MCF5272_RD_GPIO_PADAT(imm)&0x8000)==0)
	MCF5272_WR_GPIO_PADAT(imm,MCF5272_RD_GPIO_PADAT(imm)|0x80);
	j=10;	while(j--);
	MCF5272_WR_GPIO_PADAT(imm,MCF5272_RD_GPIO_PADAT(imm)&~0x80);
	
#endif
	MCF5272_WR_TIMER2_TMR(imm,MCFTIMER_TMR_DISABLE);
	MCF5272_WR_TIMER2_TER(imm,MCFTIMER_TER_CAP | MCFTIMER_TER_REF);
	MCF5272_WR_SIM_ICR1(imm,0x00c0);
	if(KeyboardTimeout==timeout_send)
	{	//发送超时 look :  SendData
		AskResent(0);
//					printk("timeout_send:%d\n",__LINE__);
		//KeyboardTimeout=0;
	}
	else if(KeyboardTimeout==timeout_receive)
	{	//接收超时 look :  mouse_interrupt
		
		SendData(KBD_RESEND);		
//					printk("send KBD_RESEND:%d\n",__LINE__);
	}
}
#endif

static int fasync_aux(int fd, struct file *filp, int on)
 {
	int retval;

	retval = fasync_helper(fd, filp, on, &queue->fasync);
	if (retval < 0)
		return retval;
	return 0;
} 
/*
 * Random magic cookie for the aux device
 */
#define AUX_DEV ((void *)queue)

static int release_aux(struct inode * inode, struct file * file)
{
	return 0;
} 


/*
 * Install interrupt handler.
 * Enable auxiliary device.
 */

static int open_aux(struct inode * inode, struct file * file)
{
	return 0;
 }

/*
 * Put bytes from input queue to buffer.
 */

static ssize_t read_aux(struct file * file, char * buffer,
			size_t count, loff_t *ppos)
{
	DECLARE_WAITQUEUE(wait, current);
	ssize_t i = count;
	unsigned char c;
	if (queue_empty()) {
		if (file->f_flags & O_NONBLOCK)
			return -EAGAIN;
#if 1
		add_wait_queue(&queue->proc_list, &wait);
repeat:
		current->state = TASK_INTERRUPTIBLE;
		if (queue_empty() && !signal_pending(current)) {//信号到来 
			schedule();
			goto repeat;
		}
		current->state = TASK_RUNNING;
		remove_wait_queue(&queue->proc_list, &wait);

#endif
		return 0;
	}
	while ((i > 0) &&(!queue_empty())) {
		c = get_from_queue();
		put_user(c, buffer++);
//		printk("0x%x\n",c);
		i--;
	} 
	if (count-i) {
		file->f_dentry->d_inode->i_atime = CURRENT_TIME;
		return count-i;
	 }
	if (signal_pending(current))
		return -ERESTARTSYS;
	return 0;
}


/*
 * Write to the aux device.
 */
#if 1
static ssize_t write_aux(struct file * file, const char * buffer,
			 size_t count, loff_t *ppos)
{
	ssize_t retval = 0;
//	printk("write:%x\n",count);
	
	if (count) {
		ssize_t written = 0;

		if (count > 32)
			count = 32; /* Limit to 32 bytes. */
		do {
			char c;
			get_user(c, buffer++);
			if(SendData(c)!=SEND_SUCCESS)
				SendData(c);
//			printk("write:%x\n",c);
//			aux_write_dev(c);
			written++;
 		} while (--count);
		retval = -EIO;
 		if (written) {
			retval = written;
			file->f_dentry->d_inode->i_mtime = CURRENT_TIME;
		}
 	}
	return retval;
} 
#endif

static unsigned int aux_poll(struct file *file, poll_table * wait)
 { 
	poll_wait(file, &queue->proc_list, wait);
	 if (!queue_empty())
		return POLLIN | POLLRDNORM;
	return 0;
  }


struct file_operations psaux_fops = {
	read:           read_aux,
	write:          write_aux,
	poll:           aux_poll,
	open:           open_aux,
	release:        release_aux,
	fasync:         fasync_aux,
	 };


int mouse_read_procmem(char *buf, char **start, off_t offset,
		                   int count, int *eof, void *data)
 {
	int len = 0;
 	while(!queue_empty()){
//		len+=sprintf(buf+len,"0x%x",get_from_queue());
		len+=sprintf(buf+len,"0x%x\n",get_from_queue());
	}
//	mouse_send_one_byte(0x55);
	
	*eof = 1;
	return len;
}



#ifdef SEND_USE_INTERRUPT
static int dog=0;
static int dog2=0;
static void
TimerKeyboardDog(unsigned long unused_ptr_info)
{
//	printk(".\n");

	dog++;
	if(dog>20)
	{
		dog=0;
//		waitus(100);
#if debugtime		
		wait_fall_edge();
#else
//		dog2=SendData(0xee);
//		if(dog2!=10)
//			printk("error :retvalue = %d \n",dog2);			
#endif
	}
#if 0	
	if(state_DataAndCLK)
	{
		dog++;
		if(dog>1)
		{
			ReleaseClkPort();
			ReleaseDataPort();
			mouse_state=0;
			dog=0;
		}
		
	}	
	if(!IsKeyReceived)
	{
		dog2++;			
		if(dog2>100)
		{
			if(dog2>101)
			{
				dog2=0;
				printk("baaa\n");
				send_data(KBD_RESET);
				
			}
			else
			{
				printk("aaa\n");
				send_data(KBD_DEFAULT);
				dog2=0;
			}
		}
	}
	else
	{
		dog2=0;
		IsKeyReceived=0;
	}
#endif	
	timer_keyboard_dog.expires = jiffies + 5;
	add_timer(&timer_keyboard_dog);
}
#endif

int init_mouse_module(void) 
{ 
#ifdef SEND_USE_INTERRUPT
	//use timer0 to do timeout check and process 
	MCF5272_WR_SIM_ICR1(imm,0x00c0);
	if (request_irq(71, timer2_interrupt,SA_INTERRUPT, "Mouse_timerout_checker", 0)) 
	{ 
		printk(KERN_ERR "Mouse_timerout_checkerInit: Unable to get IRQ.\n");
		return -EBUSY;
	}
#endif

	register_chrdev(42, "myKeyboard", &psaux_fops);
	queue = (struct aux_queue *) kmalloc(sizeof(*queue), GFP_KERNEL);
        memset(queue, 0, sizeof(*queue));
	queue->head = queue->tail = 0;
	init_waitqueue_head(&queue->proc_list);
	//queue->proc_list=NULL;
		
	 if (request_irq(MCFEXT_IRQ6_VECTOR, mouse_interrupt,SA_INTERRUPT, "Mouse", 0)) 
	  {
		printk(KERN_ERR "MouseInit: Unable to get IRQ.\n");
		return -EBUSY;
 	}
	
	printk("ret_value:%d\n",SendData(KBD_RESET));
	InitDataPort();
	InitClkPort();
	SetDataPortAsIn();
	SetClkPortAsIn();
	InitPs2Icr();
	create_proc_read_entry(		"mouse", 0 /* default mode */, 
					NULL /* parent dir */, 
					mouse_read_procmem, 
					NULL /* client data */);
#ifdef SEND_USE_INTERRUPT
	timer_keyboard_dog.function=TimerKeyboardDog;
	init_timer(&timer_keyboard_dog);
	mod_timer(&timer_keyboard_dog, jiffies+HZ/2);
#endif
	
	printk("Register mouse_irq successfully\n");

	return 0;
	
}  

void cleanup_mouse_module(void) 
{
	del_timer(&timer_keyboard_dog);
	free_irq(MCFEXT_IRQ6_VECTOR,0);
	free_irq(71,0);
	remove_proc_entry("mouse", NULL /* parent dir */);
	unregister_chrdev(42,"myKeyboard");
	printk("<1>Cleanup mouse:ok!\n"); 
}
module_init(init_mouse_module);      /*   added by ron so driver can compile directly into kernel */
module_exit(cleanup_mouse_module);  /*   added by ron so driver can compile directly into kernel */

